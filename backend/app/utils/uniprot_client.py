"""
UniProt API Client

Fetches protein sequences and information from UniProt database

TODO: YOU NEED TO IMPLEMENT THIS!

UniProt REST API documentation:
https://www.uniprot.org/help/api

Example API calls:
- Search by gene: https://rest.uniprot.org/uniprotkb/search?query=gene:BRCA1+AND+organism_id:9606
- Get entry: https://rest.uniprot.org/uniprotkb/P38398.fasta
"""

import requests
from typing import Optional, Dict
from app.config import settings

UNIPROT_API_BASE = settings.UNIPROT_API_URL


async def fetch_protein_sequence(gene_symbol: str, organism: str = "human") -> Optional[str]:
    """
    Fetch protein sequence from UniProt by gene symbol
    
    Args:
        gene_symbol: Gene symbol (e.g., "BRCA1", "TP53")
        organism: Organism name (default: "human")
    
    Returns:
        Amino acid sequence or None if not found
    
    TODO:
    - Build UniProt API query URL
    - Make GET request
    - Parse JSON response
    - Extract sequence from FASTA format
    - Return sequence string
    
    Example implementation:
    ```python
    # Search for gene
    search_url = f"{UNIPROT_API_BASE}/uniprotkb/search"
    params = {
        'query': f'gene:{gene_symbol} AND organism_id:9606',
        'format': 'json',
        'size': 1
    }
    response = requests.get(search_url, params=params)
    data = response.json()
    
    if data['results']:
        uniprot_id = data['results'][0]['primaryAccession']
        # Fetch FASTA
        fasta_url = f"{UNIPROT_API_BASE}/uniprotkb/{uniprot_id}.fasta"
        fasta_response = requests.get(fasta_url)
        # Parse sequence from FASTA
        sequence = parse_fasta(fasta_response.text)
        return sequence
    ```
    """
    print(f"⚠️  fetch_protein_sequence() NOT FULLY IMPLEMENTED")
    print(f"   TODO: Fetch sequence for gene '{gene_symbol}' from UniProt")
    
    # PLACEHOLDER: Return a sample protein sequence
    # Replace with actual UniProt API call
    sample_sequences = {
        'BRCA1': 'MDLSALRVEEVQNVINAMQKILECPICLELIKEPVSTKCDHIFCKFCMLKLLNQKKGPSQCPLCKNDITKRSLQESTRFSQLVEELLKIICAFQLDTGLEYANSYNFAKKENNSPEHLKDEVSIIQSMGYRNRAKRLLQSEPENPSLQETSLSVQLSNLGTVRTLRTKQRIQPQKTSVYIELGSDSSEDTVNKATYCSVGDQELLQITPQGTRDEISLDSAKKAACEFSETDVTNTEHHQPSNNDLNTTEKRAAERHPEKYQGSSVSNLHVEPCGTNTHASSLQHENSSLLLTKDRMNVEKAEFCNKSKQPGLARSQHNRWAGSKETCNDRRTPSTEKKVDLNADPLCERKEWNKQKLPCSENPRDTEDVPWITLNSSIQKVNEWFSRSDELLGSDDSHDGESESNAKVADVLDVLNEVDEYSGSSEKIDLLASDPHEALICKSERVHSKSVESNIEDKIFGKTYRKKASLPNLSHVTENLIIGAFVTEPQIIQERPLTNKLKRKRRPTSGLHPEDFIKKADLAVQKTPEMINQGTNQTEQNGQVMNITNSGHENKTKGDSIQNEKNPNPIESLEKESAFKTKAEPISSSISNMELELNIHNSKAPKKNRLRRKSSTRHIHALELVVSRNLSPPNCTELQIDSCSSSEEIKKKKYNQMPVRHSRNLQLMEGKEPATGAKKSNKPNEQTSKRHDSDTFPELKLTNAPGSFTKCSNTSELKEFVNPSLPREEKEEKLETVKVSNNAEDPKDLMLSGERVLQTERSVESSSISLVPGTDYGTQESISLLEVSTLGKAKTEPNKCVSQCAAFENPKGLIHGCSKDNRNDTEGFKYPLGHEVNHSRETSIEMEESELDAQYLQNTFKVSKRQSFAPFSNPGNAEEECATFSAHSGSLKKQSPKVTFECEQKEENQGKNESNIKPVQTVNITAGFPVVGQKDKPVDNAKCSIKGGSRFCLSSQFRGNETGLITPNKHGLLQNPYRIPPLFPIKSFVKTKCKKNLLEENFEEHSMSPEREMGNENIPSTVSTISRNNIRENVFKEASSSNINEVGSSTNEVGSSINEIGSSDENIQAELGRNRGPKLNAMLRLGVLQPEVYKQSLPGSNCKHPEIKKQEYEEVVQTVNTDFSPYLISDNLEQPMGSSHASQVCSETPDDLLDDGEIGEDVDSDRMLDNRATPPKIPKACCVPTELSAISMLYLDENEKVVLKNYQDMVVEGCGCR',
        'TP53': 'MEEPQSDPSVEPPLSQETFSDLWKLLPENNVLSPLPSQAMDDLMLSPDDIEQWFTEDPGPDEAPRMPEAAPPVAPAPAAPTPAAPAPAPSWPLSSSVPSQKTYQGSYGFRLGFLHSGTAKSVTCTYSPALNKMFCQLAKTCPVQLWVDSTPPPGTRVRAMAIYKQSQHMTEVVRRCPHHERCSDSDGLAPPQHLIRVEGNLRVEYLDDRNTFRHSVVVPYEPPEVGSDCTTIHYNYMCNSSCMGGMNRRPILTIITLEDSSGNLLGRNSFEVRVCACPGRDRRTEEENLRKKGEPHHELPPGSTKRALPNNTSSSPQPKKKPLDGEYFTLQIRGRERFEMFRELNEALELKDAQAGKEPGGSRAHSSHLKSKKGQSTSRHKKLMFKTEGPDSD',
        'EGFR': 'MRPSGTAGAALLALLAALCPASRALEEKKVCQGTSNKLTQLGTFEDHFLSLQRMFNNCEVVLGNLEITYVQRNYDLSFLKTIQEVAGYVLIALNTVERIPLENLQIIRGNMYYENSYALAVLSNYDANKTGLKELPMRNLQEILHGAVRFSNNPALCNVESIQWRDIVSSDFLSNMSMDFQNHLGSCQKCDPSCPNGSCWGAGEENCQKLTKIICAQQCSGRCRGKSPSDCCHNQCAAGCTGPRESDCLVCRKFRDEATCKDTCPPLMLYNPTTYQMDVNPEGKYSFGATCVKKCPRNYVVTDHGSCVRACGADSYEMEEDGVRKCKKCEGPCRKVCNGIGIGEFKDSLSINATNIKHFKNCTSISGDLHILPVAFRGDSFTHTPPLDPQELDILKTVKEITGFLLIQAWPENRTDLHAFENLEIIRGRTKQHGQFSLAVVSLNITSLGLRSLKEISDGDVIISGNKNLCYANTINWKKLFGTSGQKTKIISNRGENSCKATGQVCHALCSPEGCWGPEPRDCVSCRNVSRGRECVDKCNLLEGEPREFVENSECIQCHPECLPQAMNITCTGRGPDNCIQCAHYIDGPHCVKTCPAGVMGENNTLVWKYADAGHVCHLCHPNCTYGCTGPGLEGCPTNGPKIPSIATGMVGALLLLLVVALGIGLFMRRRHIVRKRTLRRLLQERELVEPLTPSGEAPNQALLRILKETEFKKIKVLGSGAFGTVYKGLWIPEGEKVKIPVAIKELREATSPKANKEILDEAYVMASVDNPHVCRLLGICLTSTVQLITQLMPFGCLLDYVREHKDNIGSQYLLNWCVQIAKGMNYLEDRRLVHRDLAARNVLVKTPQHVKITDFGLAKLLGAEEKEYHAEGGKVPIKWMALESILHRIYTHQSDVWSYGVTVWELMTFGSKPYDGIPASEISSILEKGERLPQPPICTIDVYMIMVKCWMIDADSRPKFRELIIEFSKMARDPQRYLVIQGDERMHLPSPTDSNFYRALMDEEDMDDVVDADEYLIPQQGFFSSPSTSRTPLLSSLSATSNNSTVACIDRNGLQSCPIKEDSFLQRYSSDPTGALTEDSIDDTFLPVPEYINQSVPKRPAGSVQNPVYHNQPLNPAPSRDPHYQDPHSTAVGNPEYLNTVQPTCVNSTFDSPAHWAQKGSHQISLDNPDYQQDFFPKEA'
    }
    
    # Return sample sequence if available
    return sample_sequences.get(gene_symbol.upper())


async def fetch_protein_info(uniprot_id: str) -> Optional[Dict]:
    """
    Fetch comprehensive protein information from UniProt
    
    Args:
        uniprot_id: UniProt accession ID
    
    Returns:
        Dictionary with protein information
    
    TODO: Implement full protein information retrieval
    """
    print(f"⚠️  fetch_protein_info() NOT IMPLEMENTED")
    print(f"   TODO: Fetch info for UniProt ID '{uniprot_id}'")
    
    return None


def parse_fasta(fasta_text: str) -> str:
    """
    Parse sequence from FASTA format
    
    Args:
        fasta_text: FASTA formatted text
    
    Returns:
        Amino acid sequence
    """
    lines = fasta_text.strip().split('\n')
    sequence = ''.join(line.strip() for line in lines if not line.startswith('>'))
    return sequence

